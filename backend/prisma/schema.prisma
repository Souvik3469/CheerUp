generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id              String     @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    email           String?    @unique
    role            String?    @default("User") // User,Mentor,NGO
    bio             String?
    image           String?
    coverImage      String?
    profileImage    String?
    password        String?
    document        String?
    questions       Question[]
    Answer          Answer[]
    tests           Test[]
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    hasNotification Boolean?
}

model Question {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    answers   Answer[]
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
}

model Answer {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    text       String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    owner      User      @relation(fields: [userId], references: [id])
    question   Question? @relation(fields: [questionId], references: [id])
    questionId String?
    userId     String
}

model Test {
    id        String         @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    mentor    User           @relation(fields: [userId], references: [id])
    userId    String
    questions TestQuestion[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TestQuestion {
    id      String       @id @default(auto()) @map("_id") @db.ObjectId
    text    String
    test    Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId  String
    options TestOption[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TestOption {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    text       String
    score      Int
    question   TestQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
